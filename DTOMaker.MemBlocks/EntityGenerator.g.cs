using System;
using System.Linq;
using DTOMaker.SrcGen.Core;
namespace DTOMaker.SrcGen.MemBlocks;
#pragma warning disable CS0162 // Unreachable code detected
public sealed class EntityGenerator : EntityGeneratorBase
{
    public EntityGenerator(ILanguage language) : base(language) { }
    protected override void OnGenerate(ModelScopeEntity entity)
    {
        Emit("// <auto-generated>");
        Emit("// This file was generated by DTOMaker.MemBlocks.");
        Emit("// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks");
        Emit("// Warning: Changes made to this file will be lost if re-generated.");
        Emit("// </auto-generated>");
        if (false)
        {
            Emit("#pragma warning disable CS0618 // Type or member is obsolete");
            Emit("#pragma warning disable CS0162 // Unreachable code detected");
        }
        Emit("#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required");
        Emit("#nullable enable");
        Emit("using System;");
        Emit("using System.Buffers;");
        Emit("using System.Runtime.CompilerServices;");
        Emit("using System.Runtime.InteropServices;");
        Emit("using System.Text;");
        Emit("using System.Threading.Tasks;");
        Emit("using DataFac.Memory;");
        Emit("using DataFac.Storage;");
        Emit("using DTOMaker.Runtime;");
        Emit("using DTOMaker.Runtime.MemBlocks;");
        Emit("");
        if (false)
        {
            Emit("using T_MemberType_ = System.Int32;");
            Emit("namespace DataFac.Memory");
            Emit("{");
            Emit("    public static class Codec_T_MemberType__T_MemberBELE_");
            Emit("    {");
            Emit("        public static T_MemberType_ ReadFromSpan(ReadOnlySpan<byte> source) => Codec_Int32_LE.ReadFromSpan(source);");
            Emit("        public static void WriteToSpan(Span<byte> source, T_MemberType_ value) => Codec_Int32_LE.WriteToSpan(source, value);");
            Emit("    }");
            Emit("}");
            Emit("namespace T_MemberTypeNameSpace_");
            Emit("{");
            Emit("    public interface IT_MemberTypeIntfName_ : IPackable");
            Emit("    {");
            Emit("        Int64 Field1 { get; set; }");
            Emit("    }");
            Emit("}");
            Emit("namespace T_MemberTypeNameSpace_.MemBlocks");
            Emit("{");
            Emit("    public class T_MemberTypeImplName_ : EntityBase, IT_MemberTypeIntfName_");
            Emit("    {");
            Emit("        private const int ClassHeight = 1;");
            Emit("        private const int BlockLength = 8;");
            Emit("        private const long StructureCode = 0x00_41L;");
            Emit("        private static readonly BlockHeader _header = BlockHeader.CreateNew(3, StructureCode);");
            Emit("");
            Emit("        public static T_MemberTypeImplName_ CreateFrom(T_MemberTypeImplName_ source)");
            Emit("        {");
            Emit("            if (source.IsFrozen) return source;");
            Emit("            return new T_MemberTypeImplName_(source);");
            Emit("        }");
            Emit("        public static T_MemberTypeImplName_ CreateFrom(IT_MemberTypeIntfName_ source)");
            Emit("        {");
            Emit("            if (source is T_MemberTypeImplName_ concrete && concrete.IsFrozen) return concrete;");
            Emit("            return new T_MemberTypeImplName_(source);");
            Emit("        }");
            Emit("        public static T_MemberTypeImplName_ CreateFrom(ReadOnlySequence<byte> buffers)");
            Emit("        {");
            Emit("            return new T_MemberTypeImplName_(buffers);");
            Emit("        }");
            Emit("        private readonly Memory<byte> _writableLocalBlock;");
            Emit("        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;");
            Emit("        public T_MemberTypeImplName_() : base(_header)");
            Emit("        {");
            Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
            Emit("        }");
            Emit("        public T_MemberTypeImplName_(T_MemberTypeImplName_ source) : base(_header, source)");
            Emit("        {");
            Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
            Emit("        }");
            Emit("        public T_MemberTypeImplName_(IT_MemberTypeIntfName_ source) : base(_header, source)");
            Emit("        {");
            Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
            Emit("            this.Field1 = source.Field1;");
            Emit("        }");
            Emit("        protected T_MemberTypeImplName_(BlockHeader header, SourceBlocks sourceBlocks) : base(_header, sourceBlocks)");
            Emit("        {");
            Emit("            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];");
            Emit("            if (sourceBlock.Length < BlockLength)");
            Emit("            {");
            Emit("                // source too small - allocate new");
            Emit("                _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
            Emit("                sourceBlock.CopyTo(_writableLocalBlock);");
            Emit("            }");
            Emit("            else");
            Emit("            {");
            Emit("                _readonlyLocalBlock = sourceBlock;");
            Emit("                _writableLocalBlock = Memory<byte>.Empty;");
            Emit("            }");
            Emit("        }");
            Emit("        public T_MemberTypeImplName_(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers)) { }");
            Emit("");
            Emit("        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);");
            Emit("        protected override IEntityBase OnPartCopy() => throw new NotImplementedException();");
            Emit("        protected override int OnGetEntityId() => 3;");
            Emit("        protected override int OnGetClassHeight() => ClassHeight;");
            Emit("        protected override ValueTask OnPack(IDataStore dataStore) => default;");
            Emit("        protected override ValueTask OnUnpack(IDataStore dataStore, int depth) => default;");
            Emit("");
            Emit("        public Int64 Field1");
            Emit("        {");
            Emit("            get => Codec_Int64_LE.ReadFromSpan(_readonlyLocalBlock.Slice(0, 8).Span);");
            Emit("            set => Codec_Int64_LE.WriteToSpan(_writableLocalBlock.Slice(0, 8).Span, IfNotFrozen(value));");
            Emit("        }");
            Emit("    }");
            Emit("}");
            Emit("namespace T_BaseNameSpace_.MemBlocks");
            Emit("{");
            Emit("    public interface IT_BaseName_");
            Emit("    {");
            Emit("        T_MemberType_ BaseField1 { get; set; }");
            Emit("    }");
            Emit("    public class T_BaseName_ : EntityBase, IT_BaseName_, IEquatable<T_BaseName_>");
            Emit("    {");
            Emit("        private const int ClassHeight = 1;");
            Emit("        private const int BlockLength = 4; // structure code = 0x0031L;");
            Emit("        private readonly Memory<byte> _writableLocalBlock;");
            Emit("        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;");
            Emit("");
            Emit("        protected override int OnGetEntityId() => 1;");
            Emit("        protected override int OnGetClassHeight() => ClassHeight;");
            Emit("        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);");
            Emit("        protected override void OnFreeze()");
            Emit("        {");
            Emit("            base.OnFreeze();");
            Emit("        }");
            Emit("");
            Emit("        protected override ValueTask OnPack(IDataStore dataStore)");
            Emit("        {");
            Emit("            return base.OnPack(dataStore);");
            Emit("        }");
            Emit("");
            Emit("        protected override ValueTask OnUnpack(IDataStore dataStore, int depth)");
            Emit("        {");
            Emit("            return base.OnUnpack(dataStore, depth);");
            Emit("        }");
            Emit("");
            Emit("        protected T_BaseName_(BlockHeader header) : base(header)");
            Emit("        {");
            Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
            Emit("        }");
            Emit("");
            Emit("        protected T_BaseName_(BlockHeader header, T_BaseName_ source) : base(header, source)");
            Emit("        {");
            Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
            Emit("            this.BaseField1 = source.BaseField1;");
            Emit("        }");
            Emit("");
            Emit("        protected T_BaseName_(BlockHeader header, IT_BaseName_ source) : base(header, source)");
            Emit("        {");
            Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
            Emit("            this.BaseField1 = source.BaseField1;");
            Emit("        }");
            Emit("");
            Emit("        protected T_BaseName_(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)");
            Emit("        {");
            Emit("            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];");
            Emit("            if (sourceBlock.Length < BlockLength)");
            Emit("            {");
            Emit("                // source too small - allocate new");
            Emit("                Memory<byte> memory = new byte[BlockLength];");
            Emit("                sourceBlock.CopyTo(memory);");
            Emit("                _readonlyLocalBlock = memory;");
            Emit("            }");
            Emit("            else");
            Emit("            {");
            Emit("                _readonlyLocalBlock = sourceBlock;");
            Emit("            }");
            Emit("            _writableLocalBlock = Memory<byte>.Empty;");
            Emit("        }");
            Emit("");
            Emit("        private const int T_FieldOffset_ = 0;");
            Emit("        private const int T_FieldLength_ = 4;");
            Emit("");
            Emit("        public T_MemberType_ BaseField1");
            Emit("        {");
            Emit("            get => (T_MemberType_)Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(_readonlyLocalBlock.Slice(T_FieldOffset_, T_FieldLength_).Span);");
            Emit("            set => Codec_T_MemberType__T_MemberBELE_.WriteToSpan(_writableLocalBlock.Slice(T_FieldOffset_, T_FieldLength_).Span, IfNotFrozen(value));");
            Emit("        }");
            Emit("");
            Emit("        public bool Equals(T_BaseName_? other)");
            Emit("        {");
            Emit("            if (ReferenceEquals(this, other)) return true;");
            Emit("            if (other is null) return false;");
            Emit("            if (!base.Equals(other)) return false;");
            Emit("            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;");
            Emit("            return true;");
            Emit("        }");
            Emit("        public override bool Equals(object? obj) => obj is T_BaseName_ other && Equals(other);");
            Emit("        public override int GetHashCode() => base.GetHashCode();");
            Emit("    }");
            Emit("}");
            Emit("namespace T_NameSpace_");
            Emit("{");
            Emit("    public interface IT_EntityIntfName_ : T_BaseNameSpace_.MemBlocks.IT_BaseName_");
            Emit("    {");
            Emit("        T_MemberType_ T_ScalarMemberName_ { get; set; }");
            Emit("        ReadOnlyMemory<T_MemberType_> T_VectorMemberName_ { get; set; }");
            Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? T_NullableEntityMemberName_ { get; set; }");
            Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ T_RequiredEntityMemberName_ { get; set; }");
            Emit("        Octets? T_NullableFixLenBinaryMemberName_ { get; set; }");
            Emit("        Octets? T_NullableVarLenBinaryMemberName_ { get; set; }");
            Emit("        Octets T_RequiredFixLenBinaryMemberName_ { get; set; }");
            Emit("        Octets T_RequiredVarLenBinaryMemberName_ { get; set; }");
            Emit("        String? T_NullableFixLenStringMemberName_ { get; set; }");
            Emit("        String? T_NullableVarLenStringMemberName_ { get; set; }");
            Emit("        String T_RequiredFixLenStringMemberName_ { get; set; }");
            Emit("        String T_RequiredVarLenStringMemberName_ { get; set; }");
            Emit("    }");
            Emit("}");
        }
        Emit("namespace T_NameSpace_.MemBlocks");
        Emit("{");
        Emit("    public partial class T_EntityImplName_ : T_BaseNameSpace_.MemBlocks.T_BaseName_, IT_EntityIntfName_, IEquatable<T_EntityImplName_>");
        Emit("    {");
        Emit("        // Derived entities: T_DerivedEntityCount_");
        foreach (var derived in entity.DerivedEntities)
        {
            using var _ = NewScope(derived);
            Emit("        // - T_EntityImplName_");
        }
        Emit("");
        if (false)
        {
            Emit("        private const int T_ClassHeight_ = 2;");
            Emit("        private const int T_EntityId_ = 2;");
            Emit("        private const int T_BlockLength_ = 1024;");
            Emit("        private const bool T_MemberObsoleteIsError_ = false;");
            Emit("        private const long T_BlockStructureCode_ = 0x0B00 + 0x0030 + 0x0002;");
        }
        Emit("        private const long BlockStructureCode = T_BlockStructureCode_;");
        Emit("        private const int ClassHeight = T_ClassHeight_;");
        Emit("        private const int BlockLength = T_BlockLength_;");
        Emit("        private readonly Memory<byte> _writableLocalBlock;");
        Emit("        private readonly ReadOnlyMemory<byte> _readonlyLocalBlock;");
        Emit("");
        Emit("        private static readonly BlockHeader _header = BlockHeader.CreateNew(T_EntityId_, BlockStructureCode);");
        Emit("");
        Emit("        public new static T_EntityImplName_ CreateFrom(T_EntityImplName_ source)");
        Emit("        {");
        Emit("            if (source.IsFrozen) return source;");
        Emit("            return source switch");
        Emit("            {");
        foreach (var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight))
        {
            using var _ = NewScope(derived);
            Emit("                T_NameSpace_.MemBlocks.T_EntityImplName_ source2 => new T_NameSpace_.MemBlocks.T_EntityImplName_(source2),");
        }
        Emit("                _ => new T_NameSpace_.MemBlocks.T_EntityImplName_(source)");
        Emit("            };");
        Emit("        }");
        Emit("");
        Emit("        public new static T_EntityImplName_ CreateFrom(T_NameSpace_.IT_EntityIntfName_ source)");
        Emit("        {");
        Emit("            if (source is T_EntityImplName_ concrete && concrete.IsFrozen) return concrete;");
        Emit("            return source switch");
        Emit("            {");
        foreach (var derived in entity.DerivedEntities.OrderByDescending(e => e.ClassHeight))
        {
            using var _ = NewScope(derived);
            Emit("                T_NameSpace_.IT_EntityIntfName_ source2 => new T_NameSpace_.MemBlocks.T_EntityImplName_(source2),");
        }
        Emit("                _ => new T_NameSpace_.MemBlocks.T_EntityImplName_(source)");
        Emit("            };");
        Emit("        }");
        Emit("");
        Emit("        public new static T_EntityImplName_ CreateFrom(ReadOnlySequence<byte> buffers)");
        Emit("        {");
        Emit("            SourceBlocks blocks = SourceBlocks.ParseFrom(buffers);");
        Emit("            return blocks.Header.EntityId switch");
        Emit("            {");
        foreach (var derived in entity.DerivedEntities)
        {
            using var _ = NewScope(derived);
            Emit("                T_EntityId_ => new T_NameSpace_.MemBlocks.T_EntityImplName_(blocks),");
        }
        Emit("                _ => new T_NameSpace_.MemBlocks.T_EntityImplName_(blocks)");
        Emit("            };");
        Emit("        }");
        Emit("");
        Emit("        protected override int OnGetEntityId() => T_EntityId_;");
        Emit("        protected override int OnGetClassHeight() => ClassHeight;");
        Emit("        protected override ReadOnlySequenceBuilder<byte> OnSequenceBuilder(ReadOnlySequenceBuilder<byte> builder) => base.OnSequenceBuilder(builder).Append(_readonlyLocalBlock);");
        Emit("        protected override IEntityBase OnPartCopy() => new T_EntityImplName_(this);");
        Emit("");
        Emit("        protected override void OnFreeze()");
        Emit("        {");
        Emit("            base.OnFreeze();");
        foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>())
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    break;
                case MemberKind.Vector:
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableEntityMemberName_?.Freeze();");
                    }
                    else
                    {
                        Emit("            _T_RequiredEntityMemberName_?.Freeze();");
                    }
                    break;
                case MemberKind.Binary:
                    break;
                case MemberKind.String:
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        }
        Emit("        }");
        Emit("");
        Emit("        protected override async ValueTask OnPack(IDataStore dataStore)");
        Emit("        {");
        Emit("            await base.OnPack(dataStore);");
        foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>())
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    break;
                case MemberKind.Vector:
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            await T_NullableEntityMemberName__Pack(dataStore);");
                    }
                    else
                    {
                        Emit("            await T_RequiredEntityMemberName__Pack(dataStore);");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            T_NullableFixLenBinaryMemberName__Pack();");
                        }
                        else
                        {
                            Emit("            await T_NullableVarLenBinaryMemberName__Pack(dataStore);");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            T_RequiredFixLenBinaryMemberName__Pack();");
                        }
                        else
                        {
                            Emit("            await T_RequiredVarLenBinaryMemberName__Pack(dataStore);");
                        }
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            T_NullableFixLenStringMemberName__Pack();");
                        }
                        else
                        {
                            Emit("            await T_NullableVarLenStringMemberName__Pack(dataStore);");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            T_RequiredFixLenStringMemberName__Pack();");
                        }
                        else
                        {
                            Emit("            await T_RequiredVarLenStringMemberName__Pack(dataStore);");
                        }
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        }
        Emit("        }");
        Emit("");
        Emit("        protected override async ValueTask OnUnpack(IDataStore dataStore, int depth)");
        Emit("        {");
        Emit("            await base.OnUnpack(dataStore, depth);");
        foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>())
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    break;
                case MemberKind.Vector:
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            await T_NullableEntityMemberName__Unpack(dataStore, depth);");
                    }
                    else
                    {
                        Emit("            await T_RequiredEntityMemberName__Unpack(dataStore, depth);");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            T_NullableFixLenBinaryMemberName__Unpack();");
                        }
                        else
                        {
                            Emit("            await T_NullableVarLenBinaryMemberName__Unpack(dataStore);");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            T_RequiredFixLenBinaryMemberName__Unpack();");
                        }
                        else
                        {
                            Emit("            await T_RequiredVarLenBinaryMemberName__Unpack(dataStore);");
                        }
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            T_NullableFixLenStringMemberName__Unpack();");
                        }
                        else
                        {
                            Emit("            await T_NullableVarLenStringMemberName__Unpack(dataStore);");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            T_RequiredFixLenStringMemberName__Unpack();");
                        }
                        else
                        {
                            Emit("            await T_RequiredVarLenStringMemberName__Unpack(dataStore);");
                        }
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        }
        Emit("        }");
        Emit("");
        Emit("        // -------------------- field map -----------------------------");
        Emit("        //  Seq.  Off.  Len.  N.    Type    End.  Name");
        Emit("        //  ----  ----  ----  ----  ------- ----  -------");
        foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>())
        {
            using var _ = NewScope(member);
            Emit("        //  T_MemberSequenceR4_  T_FieldOffsetR4_  T_FieldLengthR4_  T_ArrayLengthR4_  T_MemberTypeL7_ T_MemberBELE_    T_MemberName_");
        }
        Emit("        // ------------------------------------------------------------");
        Emit("");
        Emit("        protected T_EntityImplName_(BlockHeader header) : base(header)");
        Emit("        {");
        Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
        Emit("        }");
        Emit("        public T_EntityImplName_() : base(_header)");
        Emit("        {");
        Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
        Emit("        }");
        Emit("");
        Emit("        protected T_EntityImplName_(BlockHeader header, T_EntityImplName_ source) : base(header, source)");
        Emit("        {");
        Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
        foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>())
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    Emit("            this.T_ScalarMemberName_ = source.T_ScalarMemberName_;");
                    break;
                case MemberKind.Vector:
                    Emit("            this.T_VectorMemberName_ = source.T_VectorMemberName_;");
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableEntityMemberName_ = source._T_NullableEntityMemberName_;");
                    }
                    else
                    {
                        Emit("            _T_RequiredEntityMemberName_ = source._T_RequiredEntityMemberName_;");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            _T_NullableFixLenBinaryMemberName_ = source._T_NullableFixLenBinaryMemberName_;");
                        }
                        else
                        {
                            Emit("            _T_NullableVarLenBinaryMemberName_ = source._T_NullableVarLenBinaryMemberName_;");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            _T_RequiredFixLenBinaryMemberName_ = source._T_RequiredFixLenBinaryMemberName_;");
                        }
                        else
                        {
                            Emit("            _T_RequiredVarLenBinaryMemberName_ = source._T_RequiredVarLenBinaryMemberName_;");
                        }
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            _T_NullableFixLenStringMemberName_ = source._T_NullableFixLenStringMemberName_;");
                        }
                        else
                        {
                            Emit("            _T_NullableVarLenStringMemberName_ = source._T_NullableVarLenStringMemberName_;");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            _T_RequiredFixLenStringMemberName_ = source._T_RequiredFixLenStringMemberName_;");
                        }
                        else
                        {
                            Emit("            _T_RequiredVarLenStringMemberName_ = source._T_RequiredVarLenStringMemberName_;");
                        }
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        }
        Emit("        }");
        Emit("        public T_EntityImplName_(T_EntityImplName_ source) : this(_header, source) { }");
        Emit("");
        Emit("        protected T_EntityImplName_(BlockHeader header, IT_EntityIntfName_ source) : base(header, source)");
        Emit("        {");
        Emit("            _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
        foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>())
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    Emit("            this.T_ScalarMemberName_ = source.T_ScalarMemberName_;");
                    break;
                case MemberKind.Vector:
                    Emit("            this.T_VectorMemberName_ = source.T_VectorMemberName_;");
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("            _T_NullableEntityMemberName_ = source.T_NullableEntityMemberName_ is null ? null : T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(source.T_NullableEntityMemberName_);");
                    }
                    else
                    {
                        Emit("            _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(source.T_RequiredEntityMemberName_);");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            _T_NullableFixLenBinaryMemberName_ = source.T_NullableFixLenBinaryMemberName_;");
                        }
                        else
                        {
                            Emit("            _T_NullableVarLenBinaryMemberName_ = source.T_NullableVarLenBinaryMemberName_;");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            _T_RequiredFixLenBinaryMemberName_ = source.T_RequiredFixLenBinaryMemberName_;");
                        }
                        else
                        {
                            Emit("            _T_RequiredVarLenBinaryMemberName_ = source.T_RequiredVarLenBinaryMemberName_;");
                        }
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            _T_NullableFixLenStringMemberName_ = source.T_NullableFixLenStringMemberName_;");
                        }
                        else
                        {
                            Emit("            _T_NullableVarLenStringMemberName_ = source.T_NullableVarLenStringMemberName_;");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("            _T_RequiredFixLenStringMemberName_ = source.T_RequiredFixLenStringMemberName_;");
                        }
                        else
                        {
                            Emit("            _T_RequiredVarLenStringMemberName_ = source.T_RequiredVarLenStringMemberName_;");
                        }
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
        }
        Emit("        }");
        Emit("        public T_EntityImplName_(IT_EntityIntfName_ source) : this(_header, source) { }");
        Emit("");
        Emit("        protected T_EntityImplName_(BlockHeader header, SourceBlocks sourceBlocks) : base(header, sourceBlocks)");
        Emit("        {");
        Emit("            var sourceBlock = sourceBlocks.Blocks.Span[ClassHeight];");
        Emit("            if (sourceBlock.Length < BlockLength)");
        Emit("            {");
        Emit("                // source too small - allocate new");
        Emit("                _readonlyLocalBlock = _writableLocalBlock = new byte[BlockLength];");
        Emit("                sourceBlock.CopyTo(_writableLocalBlock);");
        Emit("            }");
        Emit("            else");
        Emit("            {");
        Emit("                _readonlyLocalBlock = sourceBlock;");
        Emit("                _writableLocalBlock = Memory<byte>.Empty;");
        Emit("            }");
        Emit("        }");
        Emit("        internal T_EntityImplName_(SourceBlocks sourceBlocks) : this(_header, sourceBlocks) { }");
        Emit("        public T_EntityImplName_(ReadOnlySequence<byte> buffers) : this(_header, SourceBlocks.ParseFrom(buffers)) { }");
        Emit("");
        if (false)
        {
            Emit("        private const int T_ScalarFieldOffset_ = 0;");
            Emit("        private const int T_VectorFieldOffset_ = 32;");
            Emit("        private const int T_NullableEntityFieldOffset_ = 64;");
            Emit("        private const int T_RequiredEntityFieldOffset_ = 128;");
            Emit("        private const int T_NullableFixLenBinaryFieldOffset_ = 192;");
            Emit("        private const int T_NullableFixLenBinaryFieldLength_ = 32;");
            Emit("        private const int T_RequiredFixLenBinaryFieldOffset_ = 224;");
            Emit("        private const int T_RequiredFixLenBinaryFieldLength_ = 32;");
            Emit("");
            Emit("        private const int T_NullableVarLenBinaryFieldOffset_ = 256;");
            Emit("        private const int T_RequiredVarLenBinaryFieldOffset_ = 320;");
            Emit("");
            Emit("        private const int T_NullableFixLenStringFieldOffset_ = 384;");
            Emit("        private const int T_NullableFixLenStringFieldLength_ = 32;");
            Emit("        private const int T_RequiredFixLenStringFieldOffset_ = 416;");
            Emit("        private const int T_RequiredFixLenStringFieldLength_ = 32;");
            Emit("");
            Emit("        private const int T_NullableVarLenStringFieldOffset_ = 448;");
            Emit("        private const int T_RequiredVarLenStringFieldOffset_ = 512;");
            Emit("");
            Emit("        private const int T_FieldLength_ = 8;");
            Emit("        private const bool T_IsBigEndian_ = false;");
            Emit("        private const int T_ArrayLength_ = 4;");
        }
        foreach (var member in entity.Members.OfType<MemBlocksModelScopeMember>())
        {
            using var _ = NewScope(member);
            switch (member.Kind)
            {
                case MemberKind.Native:
                    if (member.IsObsolete)
                    {
                        Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                    }
                    Emit("        public T_MemberType_ T_ScalarMemberName_");
                    Emit("        {");
                    Emit("            get => Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(_readonlyLocalBlock.Slice(T_ScalarFieldOffset_, T_FieldLength_).Span);");
                    Emit("            set => Codec_T_MemberType__T_MemberBELE_.WriteToSpan(_writableLocalBlock.Slice(T_ScalarFieldOffset_, T_FieldLength_).Span, IfNotFrozen(value));");
                    Emit("        }");
                    break;
                case MemberKind.Vector:
                    if (member.IsObsolete)
                    {
                        Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                    }
                    Emit("        public ReadOnlyMemory<T_MemberType_> T_VectorMemberName_");
                    Emit("        {");
                    Emit("            get");
                    Emit("            {");
                    Emit("                var sourceSpan = _readonlyLocalBlock.Slice(T_VectorFieldOffset_, T_FieldLength_ * T_ArrayLength_).Span;");
                    if (member.FieldLength == 1)
                    {
                        Emit("                return MemoryMarshal.Cast<byte, T_MemberType_>(sourceSpan).ToArray();");
                    }
                    else
                    {
                        Emit("                if (BitConverter.IsLittleEndian != T_IsBigEndian_)");
                        Emit("                {");
                        Emit("                    // endian match");
                        Emit("                    return MemoryMarshal.Cast<byte, T_MemberType_>(sourceSpan).ToArray();");
                        Emit("                }");
                        Emit("                else");
                        Emit("                {");
                        Emit("                    // endian mismatch - decode each element");
                        Emit("                    var target = new T_MemberType_[T_ArrayLength_];");
                        Emit("                    Span<T_MemberType_> targetSpan = target.AsSpan();");
                        Emit("                    for (int i = 0; i < T_ArrayLength_; i++)");
                        Emit("                    {");
                        Emit("                        var elementSpan = sourceSpan.Slice(T_FieldLength_ * i, T_FieldLength_);");
                        Emit("                        targetSpan[i] = Codec_T_MemberType__T_MemberBELE_.ReadFromSpan(elementSpan);");
                        Emit("                    }");
                        Emit("                    return target;");
                        Emit("                }");
                    }
                    Emit("            }");
                    Emit("");
                    Emit("            set");
                    Emit("            {");
                    Emit("                ThrowIfFrozen();");
                    Emit("                var targetSpan = _writableLocalBlock.Slice(T_VectorFieldOffset_, T_FieldLength_ * T_ArrayLength_).Span;");
                    Emit("                targetSpan.Clear();");
                    if (member.FieldLength == 1)
                    {
                        Emit("                value.Span.CopyTo(MemoryMarshal.Cast<byte, T_MemberType_>(targetSpan));");
                    }
                    else
                    {
                        Emit("                if (BitConverter.IsLittleEndian != T_IsBigEndian_)");
                        Emit("                {");
                        Emit("                    // endian match");
                        Emit("                    value.Span.CopyTo(MemoryMarshal.Cast<byte, T_MemberType_>(targetSpan));");
                        Emit("                }");
                        Emit("                else");
                        Emit("                {");
                        Emit("                    // endian mismatch - encode each element");
                        Emit("                    var sourceSpan = value.Span;");
                        Emit("                    for (int i = 0; i < sourceSpan.Length; i++)");
                        Emit("                    {");
                        Emit("                        var elementSpan = targetSpan.Slice(T_FieldLength_ * i, T_FieldLength_);");
                        Emit("                        Codec_T_MemberType__T_MemberBELE_.WriteToSpan(elementSpan, sourceSpan[i]);");
                        Emit("                    }");
                        Emit("                }");
                    }
                    Emit("            }");
                    Emit("        }");
                    break;
                case MemberKind.Entity:
                    if (member.IsNullable)
                    {
                        Emit("        private async ValueTask T_NullableEntityMemberName__Pack(IDataStore dataStore)");
                        Emit("        {");
                        Emit("            BlobIdV1 blobId = default;");
                        Emit("            if (_T_NullableEntityMemberName_ is not null)");
                        Emit("            {");
                        Emit("                await _T_NullableEntityMemberName_.Pack(dataStore);");
                        Emit("                var buffer = _T_NullableEntityMemberName_.GetBuffers();");
                        Emit("                blobId = await dataStore.PutBlob(buffer.Compact());");
                        Emit("            }");
                        Emit("            blobId.WriteTo(_writableLocalBlock.Slice(T_NullableEntityFieldOffset_, 64).Span);");
                        Emit("        }");
                        Emit("        private async ValueTask T_NullableEntityMemberName__Unpack(IDataStore dataStore, int depth)");
                        Emit("        {");
                        Emit("            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_NullableEntityFieldOffset_, 64));");
                        Emit("            var blob = await dataStore.GetBlob(blobId);");
                        Emit("            _T_NullableEntityMemberName_ = null;");
                        Emit("            if (blob is not null)");
                        Emit("            {");
                        Emit("                _T_NullableEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(new ReadOnlySequence<byte>(blob.Value));");
                        Emit("                await _T_NullableEntityMemberName_.Unpack(dataStore, depth - 1);");
                        Emit("            }");
                        Emit("        }");
                        Emit("        private T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_? _T_NullableEntityMemberName_;");
                        if (member.IsObsolete)
                        {
                            Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                        }
                        Emit("        public T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_? T_NullableEntityMemberName_");
                        Emit("        {");
                        Emit("            get => IfUnpacked(_T_NullableEntityMemberName_);");
                        Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                        Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_? IT_EntityIntfName_.T_NullableEntityMemberName_");
                        Emit("        {");
                        Emit("            get => IfUnpacked(_T_NullableEntityMemberName_);");
                        Emit("            set => _T_NullableEntityMemberName_ = IfNotFrozen(value is null ? null :  T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(value));");
                        Emit("        }");
                    }
                    else
                    {
                        Emit("        private async ValueTask T_RequiredEntityMemberName__Pack(IDataStore dataStore)");
                        Emit("        {");
                        Emit("            if (_T_RequiredEntityMemberName_ is null)");
                        Emit("            {");
                        Emit("                _T_RequiredEntityMemberName_ = await CreateEmpty<T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_>(dataStore);");
                        Emit("            }");
                        Emit("            await _T_RequiredEntityMemberName_.Pack(dataStore);");
                        Emit("            var buffer = _T_RequiredEntityMemberName_.GetBuffers();");
                        Emit("            BlobIdV1 blobId = await dataStore.PutBlob(buffer.Compact());");
                        Emit("            blobId.WriteTo(_writableLocalBlock.Slice(T_RequiredEntityFieldOffset_, 64).Span);");
                        Emit("        }");
                        Emit("        private async ValueTask T_RequiredEntityMemberName__Unpack(IDataStore dataStore, int depth)");
                        Emit("        {");
                        Emit("            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_RequiredEntityFieldOffset_, 64));");
                        Emit("            var blob = await dataStore.GetBlob(blobId);");
                        Emit("            if (blob is null)");
                        Emit("            {");
                        Emit("                _T_RequiredEntityMemberName_ = await CreateEmpty<T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_>(dataStore);");
                        Emit("            }");
                        Emit("            else");
                        Emit("            {");
                        Emit("                _T_RequiredEntityMemberName_ = T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(new ReadOnlySequence<byte>(blob.Value));");
                        Emit("                await _T_RequiredEntityMemberName_.Unpack(dataStore, depth - 1);");
                        Emit("            }");
                        Emit("        }");
                        Emit("        private T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_? _T_RequiredEntityMemberName_ = null;");
                        if (member.IsObsolete)
                        {
                            Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                        }
                        Emit("        public T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_ T_RequiredEntityMemberName_");
                        Emit("        {");
                        Emit("            get => IfNotNull(IfUnpacked(_T_RequiredEntityMemberName_));");
                        Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(value);");
                        Emit("        }");
                        Emit("        T_MemberTypeNameSpace_.IT_MemberTypeIntfName_ IT_EntityIntfName_.T_RequiredEntityMemberName_");
                        Emit("        {");
                        Emit("            get => IfNotNull(IfUnpacked(_T_RequiredEntityMemberName_));");
                        Emit("            set => _T_RequiredEntityMemberName_ = IfNotFrozen(T_MemberTypeNameSpace_.MemBlocks.T_MemberTypeImplName_.CreateFrom(value));");
                        Emit("        }");
                    }
                    break;
                case MemberKind.Binary:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("        private void T_NullableFixLenBinaryMemberName__Pack()");
                            Emit("        {");
                            Emit("            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(T_NullableFixLenBinaryFieldOffset_, T_NullableFixLenBinaryFieldLength_),");
                            Emit("                _T_NullableFixLenBinaryMemberName_ is null ? (ReadOnlyMemory<byte>?)null : _T_NullableFixLenBinaryMemberName_.AsMemory());");
                            Emit("        }");
                            Emit("        private void T_NullableFixLenBinaryMemberName__Unpack()");
                            Emit("        {");
                            Emit("            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(T_NullableFixLenBinaryFieldOffset_, T_NullableFixLenBinaryFieldLength_));");
                            Emit("            _T_NullableFixLenBinaryMemberName_ = memory is null ? null : Octets.UnsafeWrap(memory.Value);");
                            Emit("        }");
                            Emit("        private Octets? _T_NullableFixLenBinaryMemberName_;");
                            if (member.IsObsolete)
                            {
                                Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                            }
                            Emit("        public Octets? T_NullableFixLenBinaryMemberName_");
                            Emit("        {");
                            Emit("            get => IfUnpacked(_T_NullableFixLenBinaryMemberName_);");
                            Emit("            set => _T_NullableFixLenBinaryMemberName_ = IfNotFrozen(value);");
                            Emit("        }");
                        }
                        else
                        {
                            Emit("        private async ValueTask T_NullableVarLenBinaryMemberName__Pack(IDataStore dataStore)");
                            Emit("        {");
                            Emit("            BlobIdV1 blobId = _T_NullableVarLenBinaryMemberName_ is null");
                            Emit("                ? default");
                            Emit("                : await dataStore.PutBlob(_T_NullableVarLenBinaryMemberName_.AsMemory());");
                            Emit("            blobId.WriteTo(_writableLocalBlock.Slice(T_NullableVarLenBinaryFieldOffset_, 64).Span);");
                            Emit("        }");
                            Emit("        private async ValueTask T_NullableVarLenBinaryMemberName__Unpack(IDataStore dataStore)");
                            Emit("        {");
                            Emit("            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_NullableVarLenBinaryFieldOffset_, 64));");
                            Emit("            var blob = await dataStore.GetBlob(blobId);");
                            Emit("            _T_NullableVarLenBinaryMemberName_ = blob is null ? null : Octets.UnsafeWrap(blob.Value);");
                            Emit("        }");
                            Emit("        private Octets? _T_NullableVarLenBinaryMemberName_;");
                            if (member.IsObsolete)
                            {
                                Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                            }
                            Emit("        public Octets? T_NullableVarLenBinaryMemberName_");
                            Emit("        {");
                            Emit("            get => IfUnpacked(_T_NullableVarLenBinaryMemberName_);");
                            Emit("            set => _T_NullableVarLenBinaryMemberName_ = IfNotFrozen(value);");
                            Emit("        }");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("        private void T_RequiredFixLenBinaryMemberName__Pack()");
                            Emit("        {");
                            Emit("            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(T_RequiredFixLenBinaryFieldOffset_, T_RequiredFixLenBinaryFieldLength_),");
                            Emit("                _T_RequiredFixLenBinaryMemberName_.AsMemory());");
                            Emit("        }");
                            Emit("        private void T_RequiredFixLenBinaryMemberName__Unpack()");
                            Emit("        {");
                            Emit("            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(T_RequiredFixLenBinaryFieldOffset_, T_RequiredFixLenBinaryFieldLength_));");
                            Emit("            _T_RequiredFixLenBinaryMemberName_ = memory is null ? Octets.Empty : Octets.UnsafeWrap(memory.Value);");
                            Emit("        }");
                            Emit("        private Octets _T_RequiredFixLenBinaryMemberName_ = Octets.Empty;");
                            if (member.IsObsolete)
                            {
                                Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                            }
                            Emit("        public Octets T_RequiredFixLenBinaryMemberName_");
                            Emit("        {");
                            Emit("            get => IfUnpacked(_T_RequiredFixLenBinaryMemberName_);");
                            Emit("            set => _T_RequiredFixLenBinaryMemberName_ = IfNotFrozen(value);");
                            Emit("        }");
                        }
                        else
                        {
                            Emit("        private async ValueTask T_RequiredVarLenBinaryMemberName__Pack(IDataStore dataStore)");
                            Emit("        {");
                            Emit("            var buffer = _T_RequiredVarLenBinaryMemberName_.AsMemory();");
                            Emit("            BlobIdV1 blobId = await dataStore.PutBlob(buffer);");
                            Emit("            blobId.WriteTo(_writableLocalBlock.Slice(T_RequiredVarLenBinaryFieldOffset_, 64).Span);");
                            Emit("        }");
                            Emit("        private async ValueTask T_RequiredVarLenBinaryMemberName__Unpack(IDataStore dataStore)");
                            Emit("        {");
                            Emit("            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_RequiredVarLenBinaryFieldOffset_, 64));");
                            Emit("            var blob = await dataStore.GetBlob(blobId);");
                            Emit("            _T_RequiredVarLenBinaryMemberName_ = blob is null ? Octets.Empty : Octets.UnsafeWrap(blob.Value);");
                            Emit("");
                            Emit("        }");
                            Emit("        private Octets _T_RequiredVarLenBinaryMemberName_ = Octets.Empty;");
                            if (member.IsObsolete)
                            {
                                Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                            }
                            Emit("        public Octets T_RequiredVarLenBinaryMemberName_");
                            Emit("        {");
                            Emit("            get => IfUnpacked(_T_RequiredVarLenBinaryMemberName_);");
                            Emit("            set => _T_RequiredVarLenBinaryMemberName_ = IfNotFrozen(value);");
                            Emit("        }");
                        }
                    }
                    break;
                case MemberKind.String:
                    if (member.IsNullable)
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("        private void T_NullableFixLenStringMemberName__Pack()");
                            Emit("        {");
                            Emit("            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(T_NullableFixLenStringFieldOffset_, T_NullableFixLenStringFieldLength_),");
                            Emit("                _T_NullableFixLenStringMemberName_ is null ? (ReadOnlyMemory<byte>?)null : System.Text.Encoding.UTF8.GetBytes(_T_NullableFixLenStringMemberName_));");
                            Emit("        }");
                            Emit("        private void T_NullableFixLenStringMemberName__Unpack()");
                            Emit("        {");
                            Emit("            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(T_NullableFixLenStringFieldOffset_, T_NullableFixLenStringFieldLength_));");
                            Emit("#if NET8_0_OR_GREATER");
                            Emit("            _T_NullableFixLenStringMemberName_ = memory is null ? null : System.Text.Encoding.UTF8.GetString(memory.Value.Span);");
                            Emit("#else");
                            Emit("            _T_NullableFixLenStringMemberName_ = memory is null ? null : System.Text.Encoding.UTF8.GetString(memory.Value.ToArray());");
                            Emit("#endif");
                            Emit("        }");
                            Emit("        private string? _T_NullableFixLenStringMemberName_;");
                            if (member.IsObsolete)
                            {
                                Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                            }
                            Emit("        public string? T_NullableFixLenStringMemberName_");
                            Emit("        {");
                            Emit("            get => IfUnpacked(_T_NullableFixLenStringMemberName_);");
                            Emit("            set => _T_NullableFixLenStringMemberName_ = IfNotFrozen(value);");
                            Emit("        }");
                        }
                        else
                        {
                            Emit("        private async ValueTask T_NullableVarLenStringMemberName__Pack(IDataStore dataStore)");
                            Emit("        {");
                            Emit("            BlobIdV1 blobId = _T_NullableVarLenStringMemberName_ is null");
                            Emit("                ? default");
                            Emit("                : blobId = await dataStore.PutBlob(System.Text.Encoding.UTF8.GetBytes(_T_NullableVarLenStringMemberName_));");
                            Emit("            blobId.WriteTo(_writableLocalBlock.Slice(T_NullableVarLenStringFieldOffset_, 64).Span);");
                            Emit("        }");
                            Emit("        private async ValueTask T_NullableVarLenStringMemberName__Unpack(IDataStore dataStore)");
                            Emit("        {");
                            Emit("            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_NullableVarLenStringFieldOffset_, 64));");
                            Emit("            var blob = await dataStore.GetBlob(blobId);");
                            Emit("#if NET8_0_OR_GREATER");
                            Emit("            _T_NullableVarLenStringMemberName_ = blob is null ? null : System.Text.Encoding.UTF8.GetString(blob.Value.Span);");
                            Emit("#else");
                            Emit("            _T_NullableVarLenStringMemberName_ = blob is null ? null : System.Text.Encoding.UTF8.GetString(blob.Value.ToArray());");
                            Emit("#endif");
                            Emit("        }");
                            Emit("        private string? _T_NullableVarLenStringMemberName_;");
                            if (member.IsObsolete)
                            {
                                Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                            }
                            Emit("        public string? T_NullableVarLenStringMemberName_");
                            Emit("        {");
                            Emit("            get => IfUnpacked(_T_NullableVarLenStringMemberName_);");
                            Emit("            set => _T_NullableVarLenStringMemberName_ = IfNotFrozen(value);");
                            Emit("        }");
                        }
                    }
                    else
                    {
                        if (member.IsFixedLength)
                        {
                            Emit("        private void T_RequiredFixLenStringMemberName__Pack()");
                            Emit("        {");
                            Emit("            Codec_Memory_NE.WriteToSpan(_writableLocalBlock.Slice(T_RequiredFixLenStringFieldOffset_, T_RequiredFixLenStringFieldLength_),");
                            Emit("                System.Text.Encoding.UTF8.GetBytes(_T_RequiredFixLenStringMemberName_));");
                            Emit("        }");
                            Emit("        private void T_RequiredFixLenStringMemberName__Unpack()");
                            Emit("        {");
                            Emit("            ReadOnlyMemory<byte>? memory = Codec_Memory_NE.ReadFromMemory(_readonlyLocalBlock.Slice(T_RequiredFixLenStringFieldOffset_, T_RequiredFixLenStringFieldLength_));");
                            Emit("#if NET8_0_OR_GREATER");
                            Emit("            _T_RequiredFixLenStringMemberName_ = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.Span);");
                            Emit("#else");
                            Emit("            _T_RequiredFixLenStringMemberName_ = memory is null ? string.Empty : System.Text.Encoding.UTF8.GetString(memory.Value.ToArray());");
                            Emit("#endif");
                            Emit("        }");
                            Emit("        private string _T_RequiredFixLenStringMemberName_ = string.Empty;");
                            if (member.IsObsolete)
                            {
                                Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                            }
                            Emit("        public string T_RequiredFixLenStringMemberName_");
                            Emit("        {");
                            Emit("            get => IfUnpacked(_T_RequiredFixLenStringMemberName_);");
                            Emit("            set => _T_RequiredFixLenStringMemberName_ = IfNotFrozen(value);");
                            Emit("        }");
                        }
                        else
                        {
                            Emit("        private async ValueTask T_RequiredVarLenStringMemberName__Pack(IDataStore dataStore)");
                            Emit("        {");
                            Emit("            BlobIdV1 blobId = default;");
                            Emit("            var buffer = System.Text.Encoding.UTF8.GetBytes(_T_RequiredVarLenStringMemberName_);");
                            Emit("            blobId = await dataStore.PutBlob(buffer);");
                            Emit("            blobId.WriteTo(_writableLocalBlock.Slice(T_RequiredVarLenStringFieldOffset_, 64).Span);");
                            Emit("        }");
                            Emit("        private async ValueTask T_RequiredVarLenStringMemberName__Unpack(IDataStore dataStore)");
                            Emit("        {");
                            Emit("            BlobIdV1 blobId = BlobIdV1.UnsafeWrap(_readonlyLocalBlock.Slice(T_RequiredVarLenStringFieldOffset_, 64));");
                            Emit("            var blob = await dataStore.GetBlob(blobId);");
                            Emit("#if NET8_0_OR_GREATER");
                            Emit("            _T_RequiredVarLenStringMemberName_ = blob is null ? string.Empty : System.Text.Encoding.UTF8.GetString(blob.Value.Span);");
                            Emit("#else");
                            Emit("            _T_RequiredVarLenStringMemberName_ = blob is null ? string.Empty : System.Text.Encoding.UTF8.GetString(blob.Value.ToArray());");
                            Emit("#endif");
                            Emit("        }");
                            Emit("        private string _T_RequiredVarLenStringMemberName_ = string.Empty;");
                            if (member.IsObsolete)
                            {
                                Emit("        [Obsolete(\"T_MemberObsoleteMessage_\", T_MemberObsoleteIsError_)]");
                            }
                            Emit("        public string T_RequiredVarLenStringMemberName_");
                            Emit("        {");
                            Emit("            get => IfUnpacked(_T_RequiredVarLenStringMemberName_);");
                            Emit("            set => _T_RequiredVarLenStringMemberName_ = IfNotFrozen(value);");
                            Emit("        }");
                        }
                    }
                    break;
                default:
                    Emit($"#error Implementation for MemberKind '{member.Kind}' is missing");
                    break;
            } // switch
            Emit("");
        }
        Emit("");
        Emit("        public bool Equals(T_EntityImplName_? other)");
        Emit("        {");
        Emit("            if (ReferenceEquals(this, other)) return true;");
        Emit("            if (other is null) return false;");
        Emit("            if (!base.Equals(other)) return false;");
        Emit("            if (!_readonlyLocalBlock.Span.SequenceEqual(other._readonlyLocalBlock.Span)) return false;");
        Emit("            return true;");
        Emit("        }");
        Emit("        public override bool Equals(object? obj) => obj is T_EntityImplName_ other && Equals(other);");
        Emit("        public override int GetHashCode() => base.GetHashCode();");
        Emit("        public static bool operator ==(T_EntityImplName_? left, T_EntityImplName_? right) => left is not null ? left.Equals(right) : (right is null);");
        Emit("        public static bool operator !=(T_EntityImplName_? left, T_EntityImplName_? right) => left is not null ? !left.Equals(right) : (right is not null);");
        Emit("");
        Emit("    }");
        Emit("}");
    }
}
